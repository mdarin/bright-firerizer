// --- Initialize the SDK ---
package main

import (
	"context"
	"log"

	firebase "firebase.google.com/go"
	messaging "firebase.google.com/messaging"
//	"firebase.google.com/go/auth"
	"google.golang.org/api/option"
)

//
// main driver
//
func main() {
	opt := option.WithCredentialsFile("path/to/serviceAccountKey.json")
	app, err := firebase.NewApp(context.Background(), nil, opt)
	if err != nil {
		      log.Fatalf("error initializing app: %v\n", err)
	}




	// --- Send to individual devices ---

	// Obtain a messaging.Client from the App.
	ctx := context.Background()
	client, err := app.Messaging(ctx)
	if err != nil {
		      log.Fatalf("error getting Messaging client: %v\n", err)
	}

	// This registration token comes from the client FCM SDKs.
	registrationToken := "YOUR_REGISTRATION_TOKEN"

	// See documentation on defining a message payload.
	message := &messaging.Message{
		      Data: map[string]string{
		              "score": "850",
		              "time":  "2:45",
		      },
		      Token: registrationToken,
	}

	// Send a message to the device corresponding to the provided
	// registration token.
	response, err := client.Send(ctx, message)
	if err != nil {
		      log.Fatalln(err)
	}
	// Response is a message ID string.
	fmt.Println("Successfully sent message:", response)
	/*
	// --- Send to a topic ---

	// The topic name can be optionally prefixed with "/topics/".
	topic := "highScores"

	// See documentation on defining a message payload.
	message := &messaging.Message{
		      Data: map[string]string{
		              "score": "850",
		              "time":  "2:45",
		      },
		      Topic: topic,
	}

	// Send a message to the devices subscribed to the provided topic.
	response, err := client.Send(ctx, message)
	if err != nil {
		      log.Fatalln(err)
	}
	// Response is a message ID string.
	fmt.Println("Successfully sent message:", response)

	// --- Send to a condition ---

	// Define a condition which will send to devices which are subscribed
	// to either the Google stock or the tech industry topics.
	condition := "'stock-GOOG' in topics || 'industry-tech' in topics"

	// See documentation on defining a message payload.
	message := &messaging.Message{
		      Data: map[string]string{
		              "score": "850",
		              "time":  "2:45",
		      },
		      Condition: condition,
	}

	// Send a message to devices subscribed to the combination of topics
	// specified by the provided condition.
	response, err := client.Send(ctx, message)
	if err != nil {
		      log.Fatalln(err)
	}
	// Response is a message ID string.
	fmt.Println("Successfully sent message:", response)

	// --- Sending in the dry run mode ---

	// Firebase Admin SDK supports sending FCM messages in the dry run mode. The SDK and the 
	// FCM service perform all the usual validations on the messages sent in this mode, 
	// but they are not actually delivered to the target devices. Therefore this feature 
	// can be used to check if a certain message will be accepted by the SDK and the FCM
	// service for sending.
	// Send a message in the dry run mode.

	response, err := client.SendDryRun(ctx, message)
	if err != nil {
		      log.Fatalln(err)
	}
	// Response is a message ID string.
	fmt.Println("Dry run successful:", response)
	*/
} // eof main
